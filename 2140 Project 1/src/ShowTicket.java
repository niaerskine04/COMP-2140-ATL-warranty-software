

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class ShowTicket extends JFrame
{
    private JButton cmdPendingSort        = new JButton("Sort By Pending Status");
    private JButton cmdEditTicketStatus   = new JButton("Edit Ticket Status ");
    private JButton cmdClose            = new JButton("X");

    private JPanel pnlCommand           = new JPanel();
    private JPanel pnlDisplay           = new JPanel();


    private ArrayList<Ticket > tlist;
    //private TicketListing listin;

    private JFrame sf;

    private JScrollPane scrollPane;

    private DefaultTableModel model;

    private JTable table;

    /**
     * Show Ticket  Constructor 
     * Creates a frame that displays a table where users can view details relating to support tickets generated by customers
     */

    public ShowTicket ()
    {
        setTitle("SHOW TICKETS");

        tlist = TicketListing.loadTickets("SupportTicket.dat");
        System.out.println("tlist");
        System.out.println(tlist);
        
        String[] columnHeadings = {"Ticket Number", "Title" ,"Customer's Name", "Contact Information","Description","Priority",  "Ticket Status"};
        model = new DefaultTableModel(columnHeadings,0);
        table = new JTable(model);
        //use the model in this frame
        for (Ticket t:tlist)
        { String[] record = {"" + t.getTicketNumber(),"" + t.getTitle(),"" + t.getName(),"" +  t.getContactInfo(),"" +  t.getDescription(),"" + t.getPriority(),"" +  t.getStatus()};
            model.addRow(record); 
        }

        table.setPreferredScrollableViewportSize(new Dimension(950, tlist.size()*15 +50));
        table.setFillsViewportHeight(true);
        
        scrollPane = new JScrollPane(table);
           
        pnlDisplay.add(scrollPane);

        cmdPendingSort.setBackground(Color.GRAY);
        cmdPendingSort.setForeground(Color.WHITE);
        cmdEditTicketStatus.setBackground(Color.GRAY);
        cmdEditTicketStatus.setForeground(Color.WHITE);
        cmdClose.setBackground(Color.GRAY);
        cmdClose.setForeground(Color.PINK);

        pnlCommand.add(cmdPendingSort);
        pnlCommand.add(cmdEditTicketStatus);
        pnlCommand.add(cmdClose);

        cmdPendingSort.addActionListener(new SortByPendingButtonListener());
        cmdEditTicketStatus.addActionListener(new EditTicketStatusButtonListener());
        cmdClose.addActionListener(new CloseListener());

        add(pnlDisplay, BorderLayout.CENTER);
        add(pnlCommand, BorderLayout.SOUTH);

        pack();
        setVisible(true);

        sf = this;
    }
     

    /**
     * Sort By Ticket Number Button Listener allows user to view ticket with pending status to the newest
     */
    private class SortByPendingButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent sp) {
            model.setRowCount(0);
    
            ArrayList<Ticket> pendingTickets = new ArrayList<>();
    
            // Filter tickets with "Pending" status
            for (Ticket t : tlist) {
                if (t.getStatus().equalsIgnoreCase("Pending")) {
                    pendingTickets.add(t);
                }
            }
    
            // Sort pending tickets by their ticket number
            Collections.sort(pendingTickets, Comparator.comparingInt(Ticket::getTicketNumber));
    
            // Display sorted pending tickets
            for (Ticket t : pendingTickets) {
                String[] record = {
                        "" + t.getTicketNumber(),
                        "" + t.getTitle(),
                        "" + t.getName(),
                        "" + t.getContactInfo(),
                        "" + t.getDescription(),
                        "" + t.getPriority(),
                        "" + t.getStatus()
                };
                model.addRow(record);
            }
        }
    }

    private class CloseListener implements ActionListener
    {
        public void actionPerformed(ActionEvent cl)
        {
            sf.setVisible(false);
        }
    }

   /*  public void saveToFile(Ticket t){
        try{
            FileWriter fw = new FileWriter("OSupportTicket.dat",true);
            fw.write(t.toString()+"\n");
            fw.close();
        }catch(Exception e){
            System.out.println(e);
        }

    }*/

 

    public void overwrite()
    {

        String sourceFileName = "OSupportTicket.dat";
        String targetFileName = "SupportTickets.dat";

        try {
            // open the source file for reading
            BufferedReader reader = new BufferedReader(new FileReader(sourceFileName));

            // read the contents of the source file into a string
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(System.lineSeparator());
            }
            String fileContent = stringBuilder.toString();

            // open the target file for writing
            FileWriter writer = new FileWriter(targetFileName, false);

            // write the contents of the source file to the target file
            writer.write(fileContent);

            // close the reader and writer objects
            reader.close();
            writer.close();

            System.out.println("Successfully Updated List");
        } catch (IOException e) {
            e.printStackTrace();
        }
        emptyFile();
     }

    public void emptyFile()
    {
        String fileName = "OSupportTicket.dat";

        try {
            FileWriter writer = new FileWriter(fileName, false); // open file for writing and overwrite its content
            writer.write(""); // write an empty string to the file
            writer.close(); // close the writer object
            System.out.println("Successfully emptied the contents of the file: " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

 

    public class EditTicketStatusButtonListener implements ActionListener {
        private ArrayList<Ticket> ticketList;
        private String fileName;
        
      /*   public EditTicketStatusButtonListener(ArrayList<Ticket> ticketList, String fileName) {
            this.ticketList = ticketList;
            this.fileName = fileName;
        }*/
    
        public void actionPerformed(ActionEvent tg) {
            // Ask user to input ticket number
            int tlNumber = Integer.parseInt(JOptionPane.showInputDialog("Enter ticket number you would like to edit:"));
    
            Ticket foundTicket = null;
            for (Ticket t : ticketList) {
                if (t.getTicketNumber() == tlNumber) {
                    foundTicket = t;
                    break;
                }
            }
    
            if (foundTicket != null) {
                String newStatus = JOptionPane.showInputDialog("Enter new status:");
                if (newStatus != null && !newStatus.isEmpty()) {
                    foundTicket.setStatus(newStatus); // Update the status
                    saveToFile(ticketList); // Save updated tickets to file
                    JOptionPane.showMessageDialog(null, "Ticket status updated successfully.");
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid status provided.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No ticket found with the given number.");
            }
        }
    
        private void saveToFile(ArrayList<Ticket> tickets) {
            try {
                FileWriter fw = new FileWriter(fileName, false); // Overwrite the file
                for (Ticket t : tickets) {
                    fw.write(t.toString() + "\n");
                }
                fw.close();
                System.out.println("Successfully updated file: " + fileName);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
        	/**
			 * Creates a frame to display the error message to the user.
			 * @param message
			 */
			public void showMessage(String message){
                JFrame frame = new JFrame("Error");
                
                    JOptionPane.showMessageDialog(frame, message,"Error", JOptionPane.ERROR_MESSAGE);
                    
                    frame.setSize(350,350);
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    frame.setVisible(true);
                }
    
    

}
